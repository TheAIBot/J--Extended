// Lexical grammar for j--
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

// Whitespace -- ignored
" "|"\t"|"\n"|"\r"|"\f"

// Single line comment -- ignored
"//" {~("\n"|"\r")} ("\n"|"\r"["\n"])

// Multi line comment -- ignored
"/*" {~("*/")} ("*/")

// Reserved words
ABSTRACT    ::= "abstract"
BOOLEAN     ::= "boolean"
CHAR        ::= "char"
CLASS       ::= "class"
ELSE        ::= "else"
EXTENDS     ::= "extends"
FALSE       ::= "false"
IF          ::= "if"
IMPORT      ::= "import"
INSTANCEOF  ::= "instanceof"
INT         ::= "int"
NEW         ::= "new"
NULL        ::= "null"
PACKAGE     ::= "package"
PRIVATE     ::= "private"
PROTECTED   ::= "protected"
PUBLIC      ::= "public"
RETURN      ::= "return"
STATIC      ::= "static"
SUPER       ::= "super"
THIS        ::= "this"
TRUE        ::= "true"
VOID        ::= "void"
WHILE       ::= "while"
BREAK       ::="break"
BYTE        ::="byte"
CASE        ::="case"
CATCH       ::="catch"
CONST       ::="const"
CONTINUE    ::="continue"
DEFAULT     ::="default"
DO          ::="do"
DOUBLE      ::="double"
FINAL       ::="final"
FINALLY     ::="finally"
FLOAT       ::="float"
FOR         ::="for"
GOTO        ::="goto"
IMPLEMENTS  ::="implements"
INTERFACE   ::="interface"
LONG        ::="long"
NATIVE      ::="native"
SHORT       ::="short"
STRICTFP    ::="strictfp"
SWITCH      ::="switch"
SYNCHRONIZED::="synchronized"
THROW       ::="throw"
THROWS      ::="throws"
TRANSIENT   ::="transient"
TRY         ::="try"
VOLATILE    ::="volatile"

// Operators
INC         ::= "++"
DEC         ::= "--"
MINUS       ::= "-"
PLUS        ::= "+"
STAR        ::= "*"
DIV         ::= "/"
MOD         ::= "%"
TER         ::= "?"

//bitwise operators
BAND        ::= "&"
BOR         ::= "|"
BXOR        ::= "^"
COMPLEMENT  ::= "~"
ALSHIFT     ::= "<<"
ARSHIFT     ::= ">>"
LRSHIFT     ::= ">>>"

//logical operators
LOR         ::= "||"
LAND        ::= "&&"
LNOT        ::= "!"

//assignment
ASSIGN      ::= "="
PLUS_ASSIGN ::= "+="
BAND_ASSIGN ::= "&="
DIV_ASSIGN  ::= "/="
MINUS_ASSIGN::= "-="
STAR_ASSIGN ::= "*="
MOD_ASSIGN  ::= "%="
ARSHIFT_ASSIGN::=">>="
LRSHIFT_ASSIGN::=">>>="
ALSHIFT_ASSIGN::= "<<="
BXOR_ASSIGN ::= "^="
BOR_ASSIGN  ::= "|="

//equality
EQUAL       ::= "=="
NEQ         ::= "!="
GT          ::= ">"
GE          ::= ">="
LT          ::= "<"
LE          ::= "<="


// Separators
COMMA       ::= ","
DOT         ::= "."
LBRACK      ::= "["
LCURLY      ::= "{"
LPAREN      ::= "("
RBRACK      ::= "]"
RCURLY      ::= "}"
RPAREN      ::= ")"
SEMI        ::= ";"
COLON       ::= ":"

// Identifiers
IDENTIFIER ::= ("a"-"z"|"A"-"Z"|"_"|"$") {"a"-"z"|"A"-"Z"|"_"|"0"-"9"|"$"}

// Literals
INT_LITERAL    ::= "0" | ("1"-"9") {"0"-"9"}
DOUBLE_LITERAL ::= ( ("0"-"9") {"0"-"9"} (
                            ( "." {"0"-"9"} [("e" | "E") ["+" | "-"] {"0"-"9"}] ["d" | "D"] )
                            | ( ("e" | "E") ["+" | "-"] {"0"-"9"} ["d" | "D"] )
                            | ("d" | "D") ) )
| ( "." ("0"-"9") {"0"-"9"} [ ("e" | "E") ["+" | "-"] {"0"-"9"} ] [ ("d" | "D") ] )
ESC            ::= "\\" ("n"|"r"|"t"|"b"|"f"|"'"|"\""|"\\")
STRING_LITERAL ::= "\"" {ESC | ~("\""|"\\"|"\n"|"\r")} "\""
CHAR_LITERAL   ::= "'" (ESC | ~("'"|"\n"|"\r"|"\\")) "'"

// End of file
EOF            ::= "<end of file>"


