// A grammar for j--, suitable for parsing by recursive descent
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
                    {IMPORT  qualifiedIdentifier SEMI}
                    {typeDeclaration} EOF 

qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}

typeDeclaration ::= modifiers (classDeclaration | interfaceDeclaration)

modifiers ::= {PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT}

classDeclaration ::= CLASS IDENTIFIER 
                       [EXTENDS qualifiedIdentifier]
                       [IMPLEMENTS qualifiedIdentifier {COMMA qualifiedIdentifier}]
                       classBody

interfaceDeclaration ::= INTERFACE IDENTIFIER
                            [extends qualifiedIdentifier]
                            interfaceBody

classBody ::= LCURLY {modifiers memberDecl} RCURLY

interfaceBody ::= LCURLY {modifiers memberSig} RCURLY

memberDecl ::= IDENTIFIER            // constructor
                 formalParameters block
             | STATIC block // static initializaion block
             | block // instance initialization block
             | (VOID | type) IDENTIFIER  // method
                 formalParameters
                 (block | SEMI)
             | type variableDeclarators SEMI // field

memberSig ::= IDENTIFIER formalParameters SEMI // constructor
              | (VOID | type) IDENTIFIER formalParameters SEMI // method
              | type variableDeclarators SEMI // field

block ::= LCURLY {blockStatement} RCURLY 

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | IF parExpression statement [ELSE statement]
            | WHILE parExpression statement
            | TRY block 
            	{CATCH (formalParameter) block} 
            	[FINALLY block]
            | RETURN [expression] SEMI
            | THROW expression SEMI
            | SEMI 
            | statementExpression SEMI

formalParameters ::= LPAREN 
                       [formalParameter {COMMA formalParameter}]
                     RPAREN

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [(ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | DIV_ASSIGN | STAR_ASSIGN | MOD_ASSIGN) variableInitializer]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY 
                       [variableInitializer {COMMA variableInitializer}]
                     RCURLY 

arguments ::= LPAREN [expression {COMMA expression}] RPAREN

type ::= referenceType | basicType

basicType ::= BOOLEAN | CHAR | INT | DOUBLE

referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
                | qualifiedIdentifier {LBRACK RBRACK}

statementExpression ::= expression // but must have side-effect, eg i++

expression ::= assignmentExpression

assignmentExpression ::= conditionalExpression

//level 2			 
conditionalExpression ::= conditionalOrExpression
						  | conditionalOrExpression TER expression COLON conditionalExpression

//level 3
conditionalOrExpression ::= conditionalAndExpression
						  | conditionalOrExpression LOR conditionalAndExpression
				
//level 4				
conditionalAndExpression ::= inclusiveOrExpression
                           | conditionalAndExpression LAND inclusiveOrExpression
	
//level 5	
inclusiveOrExpression ::= exclusiveOrExpression
						| inclusiveOrExpression BOR exclusiveOrExpression

//level 6
exclusiveOrExpression ::= andExpression
						| exclusiveOrExpression BXOR andExpression

//level 7
andExpression ::= equalityExpression
				| andExpression BAND equalityExpression

//level 8
equalityExpression ::= relationalExpression
                     | equalityExpression EQUAL relationalExpression
					 | equalityExpression NEQ   relationalExpression

//level 9
relationalExpression ::= shiftExpression
					   | relationalExpression LT shiftExpression
					   | relationalExpression GT shiftExpression
					   | relationalExpression LEQ shiftExpression
					   | relationalExpression GEQ shiftExpression
					   | relationalExpression INSTANCEOF referenceType

//level 10
shiftExpression ::= additiveExpression
				  | shiftExpression ALSHIFT additiveExpression
				  | shiftExpression ARSHIFT additiveExpression
				  | shiftExpression LRSHIFT additiveExpression

//level 11
additiveExpression ::= multiplicativeExpression
					 | additiveExpression PLUS  multiplicativeExpression
					 | additiveExpression MINUS multiplicativeExpression

//level 12
multiplicativeExpression ::= unaryExpression
						   | multiplicativeExpression STAR unaryExpression
						   | multiplicativeExpression DIV  unaryExpression
						   | multiplicativeExpression MOD  unaryExpression


unaryExpression ::= INC unaryExpression
				  | DEC unaryExpression
                  | MINUS unaryExpression
                  | PLUS unaryExpression
                  | simpleUnaryExpression

simpleUnaryExpression ::= COMPLEMENT unaryExpression
						| LNOT unaryExpression
                        | LPAREN basicType RPAREN unaryExpression //casted
                        | LPAREN // casted               
                            referenceType
                          RPAREN simpleUnaryExpression
                        | postfixExpression 

postfixExpression ::= primary {selector} {(INC | DEC)}

selector ::= DOT qualifiedIdentifier [arguments]
           | LBRACK expression RBRACK

primary ::= parExpression
          | THIS [arguments]
          | SUPER ( arguments 
                  | DOT IDENTIFIER [arguments] 
                  )
          | literal
          | NEW creator
          | qualifiedIdentifier [arguments]

creator ::= (basicType | qualifiedIdentifier) 
              ( arguments
              | LBRACK RBRACK {LBRACK RBRACK} [arrayInitializer]
              | newArrayDeclarator
              )

newArrayDeclarator ::= LBRACK expression RBRACK 
                         {LBRACK expression RBRACK} {LBRACK RBRACK}

literal ::= INT_LITERAL | DOUBLE_LITERAL | CHAR_LITERAL | STRING_LITERAL
          | TRUE        | FALSE        | NULL


          